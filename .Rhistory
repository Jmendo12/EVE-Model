rootVar = sigma2/(2*alpha), rootE = theta)
}
# Chunk 10: calcCovMatOUfunction
# Calculate covarance matrix given alpha for each edge and
calcCovMatOU <- function(tree, alphas, V){
# copy the phylogeny and multiply edge lengths with alpha
attenuationTree <- tree
attenuationTree$edge.length <- attenuationTree$edge.length*alphas
# calculate the attenuation matrix using the cophenetic distance function
A <- cophenetic(attenuationTree)
# get matrix of variances of the most recent common ancestors
Vmrca <- apply(mrca(tree),1:2,function(i) V[i])
# return covariance matrix
return( Vmrca * exp(-A) )
}
# Chunk 11: expandECovMat
#expand covariance matrix and expected values
expandECovMat <- function(E, covMat, sigma2, alpha, beta){
iExpand <- rep(1:length(nindiv),nindiv) # nindiv is global variable
# expand covariance matrix
covMat <- covMat[iExpand,iExpand]
# Add within species variance
diag(covMat) <- diag(covMat)+beta*sigma2/(2*alpha)
# expand expected values
E <- E[iExpand]
return( list(covMat=covMat, E=E))
}
# Chunk 12: loadExampleDataAndGetInitValues
# load example data from the original EVE implementation
# nindiv: number of samples per species
nindiv <- scan("data/exampleNindivs.nindiv",sep = " ")
data <- as.matrix(read.table("data/sampleExpr.dat",skip = 1,header = F,row.names = 1))
# load results from original EVE implementation
EVEresults <- read.table(file = "data/indivBetaMLparams_trialRun.res",
col.names = c("theta","sigma2","alpha","beta"))
EVEresults$ll <- scan(file = "data/indivBetaMLs_trialRun.res")
# get the expression data for a single gene
singleGeneData <- tibble( spc=rep(LETTERS[1:5],nindiv),value = data["GENE3",])
# calculate initial parameters
initParams <-
singleGeneData %>%
group_by(spc) %>%
summarize( spcMean=mean(value), spcVar=var(value)) %>%
summarize( theta = mean(spcMean),
sigma2 = var(spcMean),
alpha = 0.5,
beta = mean(spcVar)/sigma2)
# Chunk 13: logLikOU
logLikOU <- function(x, theta, sigma2, alpha, beta){
EV <- calcExpVarOUconst(tree, theta, alpha, sigma2)
covMat <- calcCovMatOU(tree,alpha,EV$V)
expanded <- expandECovMat(EV$E, covMat, sigma2, alpha, beta)
# Get log likelihood from the multivariate normal distribution density
dmvnorm(x=x,mean=expanded$E, sigma=expanded$covMat, log = TRUE )
}
myOptFun <- function(x){
# note: here we optimize sigma, not sigma2
ll <- -logLikOU(x = singleGeneData$value,
theta = x[1], sigma2 = x[2]^2, alpha = x[3], beta = x[4])
# print the parameters
cat("theta =", x[1], "  sigma =", x[2], "  alpha =", x[3], "  beta =", x[4], "  ll =",ll,"\n")
ll
}
initParamsVec <- c(initParams$theta, sqrt(initParams$sigma2), initParams$alpha, initParams$beta)
res <- optim(initParamsVec, myOptFun, method = "L-BFGS-B")
initParamsVec <- c(initParams$theta, sqrt(initParams$sigma2), initParams$alpha, initParams$beta)
EV <- calcExpVarOUconst(tree, initParamsVec[1], initParamsVec[3], initParamsVec[2]^2)
covMat <- calcCovMatOU(tree, alpha, EV$V)
View(covMat)
covMat <- calcCovMatOU(tree, initParamsVec[3], EV$V)
expanded <- expandECovMat(EV$E, covMat, initParamsVec[2]^2, initParamsVec[3], initParamsVec[4])
View(expanded)
expandedMat <- expanded$covMat
View(expandedMat)
isSymmetric(expandedMat)
View(expandedMat)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
isSymmetric(covar.matrix.exp)
?optim()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
?vector()
result <- divergence.diversity.test()
result <- divergence.diversity.test()
result <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
result <- divergence.diversity.test()
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
result <- divergence.diversity.test()
nrow(ll.pergene)
len(ll.pergene)
length(ll.pergene)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
?optim()
source('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
warnings()
?prod()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
View(ll.pergene)
View(param.matrix)
?dmvnorm
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
View(ll.pergene)
result <- divergence.diversity.test()
result <- divergence.diversity.test()
View(param.matrix)
?optim()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(latex2exp)
library(ape)
library(mvtnorm)
theme_set(theme_bw()) # ggplot theme
# Chunk 2: plotRandomWalk
set.seed(126)
reps=200
n=100 # number of steps
sigma=1
x=replicate(n = reps,cumsum(c(0,rnorm(n,sd = sigma))))
reshape2::melt(x) %>%
rename( t=Var1, rep=Var2) %>%
mutate(t=t-1) %>%
ggplot()+
geom_line( aes(x=t,y=value,group=rep) ) +
geom_line( data=tibble(x=0:n,y=2*sigma*sqrt(0:n)), aes(x,y),color="red" ) +
geom_line( data=tibble(x=0:n,y=-2*sigma*sqrt(0:n)), aes(x,y),color="red" ) +
annotate("text", x = n*0.1, y = sqrt(n*0.1), label = "2*sqrt(sigma^2*t)", parse = TRUE,color="red") +
coord_cartesian(ylim=c(-30,30))
# Chunk 3: plotVarVStime
tibble( Variance=apply(x,1,var), t=0:100) %>%
ggplot(aes(x=t,y=Variance))+
geom_line( ) +
geom_line( data=tibble(x=c(0,100),y=c(0,100)*sigma^2), aes(x,y),color="red" ) +
coord_cartesian(ylim=c(0,100))
# Chunk 4: plotExampleCovariancePhylo
tree <- read.tree(text="((B:0.9,C:1.1):0.5);")
plot.phylo(tree, type="p",show.tip.label = F,y.lim=c(0.5,2.5),x.lim=c(-0.2,1.7),no.margin = T)
ape::edgelabels(TeX(paste0("d_",1:3)),1:3,adj = c(0.5,-0.2),frame = "none")
ape::nodelabels(TeX(paste0("x_",0:3)),c(3:4,1:2),frame = "circle")
# Chunk 5: plotRandomWalkOU
reps=200
n=100 # number of steps
sigma=1
alpha=0.02
theta=0
OUcumsum <- function(x, theta=0, alpha=0.02){
retX <- numeric(length(x))
for(i in 1:(length(x)-1)){
retX[i+1] = retX[i] + x[i+1] + alpha*(theta-retX[i])
}
return(retX)
}
x=replicate(n = reps,OUcumsum(c(0,rnorm(n,sd = sigma)) ))
reshape2::melt(x) %>%
rename( t=Var1, rep=Var2) %>%
mutate(t=t-1) %>%
ggplot()+
geom_line( aes(x=t,y=value,group=rep) ) +
geom_line( data=tibble(x=0:n,y=2*sigma*sqrt(0:n)), aes(x,y),color="red", linetype=2 ) +
geom_line( data=tibble(x=0:n,y=-2*sigma*sqrt(0:n)), aes(x,y),color="red", linetype=2 ) +
geom_line( data=tibble(x=0:n,y=2*sqrt(sigma^2/(2*alpha)*(1-exp(-2*alpha*(0:n))))), aes(x,y),color="red" ) +
geom_line( data=tibble(x=0:n,y=-2*sqrt(sigma^2/(2*alpha)*(1-exp(-2*alpha*(0:n))))), aes(x,y),color="red" ) +
coord_cartesian(ylim=c(-30,30))
# Chunk 6: plotVarVStimeOU
tibble( Variance=apply(x,1,var), t=0:100) %>%
ggplot(aes(x=t,y=Variance))+
geom_line( ) +
geom_line( data=tibble(x=c(0,100),y=c(0,100)), aes(x,y),color="red", linetype=2 )+
geom_line( data=tibble(x=0:n,y=sigma^2/(2*alpha)*(1-exp(-2*alpha*(0:n)))), aes(x,y),color="red" ) +
coord_cartesian(ylim=c(0,100))
# Chunk 7: plotRandomWalkOUwithShift
reps=200
n=100 # number of steps
sigma=1
alpha=0.02
theta=20
OUcumsum <- function(x, theta, alpha){
retX <- numeric(length(x))
for(i in 1:(length(x)-1)){
retX[i+1] = retX[i] + x[i+1] + alpha*(theta-retX[i])
}
return(retX)
}
x=replicate(n = reps,OUcumsum(c(0,rnorm(n,sd = sigma)), theta, alpha ))
reshape2::melt(x) %>%
rename( t=Var1, rep=Var2) %>%
mutate(t=t-1) %>%
ggplot()+
geom_line( aes(x=t,y=value,group=rep) ) +
geom_line( data=tibble(x=0:n,y=theta*(1-exp(-alpha*(0:n)))), aes(x,y),color="blue" ) +
geom_line( data=tibble(x=0:n,y=theta*(1-exp(-alpha*(0:n)))+2*sqrt(sigma^2/(2*alpha)*(1-exp(-2*alpha*(0:n))))), aes(x,y),color="red" ) +
geom_line( data=tibble(x=0:n,y=theta*(1-exp(-alpha*(0:n)))+-2*sqrt(sigma^2/(2*alpha)*(1-exp(-2*alpha*(0:n))))), aes(x,y),color="red" )
# Chunk 8: plotExampleTree
tree <- read.tree(text="((A:0.1,B:0.1):0.3,(C:0.2,(D:0.1,E:0.1):0.1):0.2);")
par(mar = c(5, 4, 4, 2) + 0.1) #reset the margins
plot.phylo(tree, type="p",show.tip.label = T,label.offset = 0.05,y.lim=c(0.5,5.5),no.margin = F)
nodelabels(text = 1:(Ntip(tree)+Nnode(tree)),node = 1:(Ntip(tree)+Nnode(tree)),frame = "circle")
edgelabels(frame = "none",col = "red",adj = c(0.5,-0.1))
axisPhylo(1)
# Chunk 9: calcExpVarOUfunction
# calculate expected species mean (E) and evolutionary variance (V) for each node. given theta, alpha and sigma^2 for each edge
calcExpVarOU <- function(tree, thetas, alphas, sigma2s, rootVar, rootE){
# declare vectors of expectation values and variances for all tips and internal nodes
E <- numeric( Ntip(tree) + Nnode(tree) )
V <- numeric( Ntip(tree) + Nnode(tree) )
# get the order of the edges to traverse from root to tips
edgeOrder <- rev(postorder(tree))
# get index of root
iRoot <- tree$edge[edgeOrder[1],1]
# set root values
E[iRoot] <- rootE
V[iRoot] <- rootVar
for(i in edgeOrder){
iParent <- tree$edge[i,1]
iChild <- tree$edge[i,2]
deltaT <- tree$edge.length[i]
E[iChild] <- E[iParent]*exp(-alphas[i]*deltaT) + thetas[i]*(1 - exp(-alphas[i]*deltaT))
V[iChild] <- V[iParent]*exp(-2*alphas[i]*deltaT) + sigma2s[i]/(2*alphas[i])*(1 - exp(-2*alphas[i]*deltaT))
}
return(data.frame(E, V))
}
# silly function with same values of parameters across the tree
calcExpVarOUconst <- function(tree, theta, alpha, sigma2){
N <- Nedge(tree)
calcExpVarOU(tree, thetas = rep(theta,N), alphas = rep(alpha,N), sigma2s = rep(sigma2,N),
rootVar = sigma2/(2*alpha), rootE = theta)
}
# Chunk 10: calcCovMatOUfunction
# Calculate covarance matrix given alpha for each edge and
calcCovMatOU <- function(tree, alphas, V){
# copy the phylogeny and multiply edge lengths with alpha
attenuationTree <- tree
attenuationTree$edge.length <- attenuationTree$edge.length*alphas
# calculate the attenuation matrix using the cophenetic distance function
A <- cophenetic(attenuationTree)
# get matrix of variances of the most recent common ancestors
Vmrca <- apply(mrca(tree),1:2,function(i) V[i])
# return covariance matrix
return( Vmrca * exp(-A) )
}
# Chunk 11: expandECovMat
#expand covariance matrix and expected values
expandECovMat <- function(E, covMat, sigma2, alpha, beta){
iExpand <- rep(1:length(nindiv),nindiv) # nindiv is global variable
# expand covariance matrix
covMat <- covMat[iExpand,iExpand]
# Add within species variance
diag(covMat) <- diag(covMat)+beta*sigma2/(2*alpha)
# expand expected values
E <- E[iExpand]
return( list(covMat=covMat, E=E))
}
# Chunk 12: loadExampleDataAndGetInitValues
# load example data from the original EVE implementation
# nindiv: number of samples per species
nindiv <- scan("data/exampleNindivs.nindiv",sep = " ")
data <- as.matrix(read.table("data/sampleExpr.dat",skip = 1,header = F,row.names = 1))
# load results from original EVE implementation
EVEresults <- read.table(file = "data/indivBetaMLparams_trialRun.res",
col.names = c("theta","sigma2","alpha","beta"))
EVEresults$ll <- scan(file = "data/indivBetaMLs_trialRun.res")
# get the expression data for a single gene
singleGeneData <- tibble( spc=rep(LETTERS[1:5],nindiv),value = data["GENE3",])
# calculate initial parameters
initParams <-
singleGeneData %>%
group_by(spc) %>%
summarize( spcMean=mean(value), spcVar=var(value)) %>%
summarize( theta = mean(spcMean),
sigma2 = var(spcMean),
alpha = 0.5,
beta = mean(spcVar)/sigma2)
# Chunk 13: logLikOU
logLikOU <- function(x, theta, sigma2, alpha, beta){
EV <- calcExpVarOUconst(tree, theta, alpha, sigma2)
covMat <- calcCovMatOU(tree,alpha,EV$V)
expanded <- expandECovMat(EV$E, covMat, sigma2, alpha, beta)
# Get log likelihood from the multivariate normal distribution density
dmvnorm(x=x,mean=expanded$E, sigma=expanded$covMat, log = TRUE )
}
myOptFun <- function(x){
# note: here we optimize sigma, not sigma2
ll <- -logLikOU(x = singleGeneData$value,
theta = x[1], sigma2 = x[2]^2, alpha = x[3], beta = x[4])
# print the parameters
cat("theta =", x[1], "  sigma =", x[2], "  alpha =", x[3], "  beta =", x[4], "  ll =",ll,"\n")
ll
}
initParamsVec <- c(initParams$theta, sqrt(initParams$sigma2), initParams$alpha, initParams$beta)
res <- optim(initParamsVec, myOptFun, method = "L-BFGS-B")
View(res)
?matrix()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
View(ll.pergene)
View(ll.pergene)
View(ll.pergene)
View(ll.pergene)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("tidyverse", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test
remove(res)
res <- divergence.diversity.test()
res <- divergence.diversity.test()
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
expanded.matrix$expected.mean
theta
sigma.squared
sigma.squared
theta
expanded.matrix$expected.mean
expanded.matrix$cov.matr
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
library("tidyverse", lib.loc="E:/Programs/R-3.5.1/library")
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
expanded.matrix$cov.matr
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
res <- divergence.diversity.test()
res <- divergence.diversity.test()
expanded.matrix$expected.mean
gene.data.row
expanded.matrix$cov.matr
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
expanded.matrix$expected.mean
gene.data[row, ]
expanded.matrix$cov.matr
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
View(ll.pergene)
ll.pergene[[1]]
View(ll.pergene)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
?list()
?matrix()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
View(max.params)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
?list()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
View(max.params)
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
asmatrix()
?as.matrix()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
res <- divergence.diversity.test()
res <- divergence.diversity.test()
View(max.params)
max.params[par]
res <- divergence.diversity.test()
max.params[par, ]
max.params[1]
max.params[[1]
]
max.params[1, [1]]
max.params[[1, 1]]
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
max.params[1, ]
max.params[1,1]
max.params[1,2]
m <- max.params[1,]
m[1]
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
res <- divergence.diversity.test()
m <- c(max.params[1])
m[1]
m[[1]]
m[[2]]
max.params[2]
v <- vector(length = 10)
v[1] <- max.params[2]
View(v)
?prod()
v[2] <- 12
View(v)
prod(v)
as.vector()
vv <- as.vector(v)
p <- v[1]
p <- P * v[2]
p <- p * v[2]
as.numeric()
?as.numeric
x <- as.numeric(v[1])
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
library("tidyverse", lib.loc="E:/Programs/R-3.5.1/library")
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
debugSource('E:/R Projects/EVE-Model/EVEmodel.R')
result <- divergence.diversity.test()
ll.pergene
ll.total
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
library("mvtnorm", lib.loc="E:/Programs/R-3.5.1/library")
library("tidyselect", lib.loc="E:/Programs/R-3.5.1/library")
source('E:/R Projects/EVE-Model/EVEmodel.R')
divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
source('E:/R Projects/EVE-Model/EVEmodel.R')
divergence.diversity.test()
source('E:/R Projects/EVE-Model/EVEmodel.R')
divergence.diversity.test()
ll.vec, ll.tot <- load("./results/dvdtresults.RData")
load("./results/dvdtresults.RData")
source('E:/R Projects/EVE-Model/EVEmodel.R')
