# Read the text in from a file name given by the user
fileName <- readline(promp = "Enter the file in which the phylogeny is stored")
fileName <- readline(promp = "Enter the file in which the phylogeny is stored: ")
read?
()
?read()
?readLines
?scan
fileName
yo
remove(fileName)
# Read the text in from a file name given by the user
fileName <- readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a data
directory: ")
remove(fileName)
# Read the text in from a file name given by the user
fileName <- readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a data directory: ")
remove(fileName)
# Read the text in from a file name given by the user
fileName <- paste("data/", readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a data directory: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "" readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a data directory: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a data directory: "))
clear()
clear
?scan()
paste(fileName, sep = "", .newick)
paste(fileName, sep = "", ".newick")
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(promp = "Enter the file in which the phylogeny is stored -
this should be stored in a directory called data, and include the file extension: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(promp = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
# Read the text in from a file name given by the user
fileName <- paste("data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored -
this should be stored in a directory called data, and include the file extension: "))
fileName <- paste("data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
remove(fileName)
treeData.asText <- scan(fileName)
fileName <- paste("data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
fileName <- paste("data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
getwd()
fileName <- paste("./data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
fileName <- paste("./data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
getwd()
# Read the text in from a file name given by the user
fileName <- paste("/data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
# Read the text in from a file name given by the user
fileName <- paste("/data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
fileName <- paste("/data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
fileName <- paste("./data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
treeData.asText <- scan(fileName)
treeData.asText <- scan(fileName)
treeData.asText <- scan(fileName)
treeData.asText <- scan(fileName, what = character())
tree <- read.tree(treeData.asText)
?read.tree
# treeData.asText <- scan(fileName, what = character())
tree <- read.tree(fileName)
# treeData.asText <- scan(fileName, what = character())
tree <- read.tree(fileName)
install.packages(ape)
install.packages("ape")
# Create a tree from the file given by the user
tree <- read.tree(fileName)
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
# Create a tree from the file given by the user
tree <- read.tree(fileName)
# Create a tree from the file given by the user
tree <- read.tree(fileName)
fileName <- paste("./data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
tree <- read.tree(fileName)
# Read the text in from a file name given by the user
fileName <- paste("./data/", sep = "",
readline(prompt = "Enter the file in which the phylogeny is stored - this should be stored in a directory called data, and include the file extension: "))
# Create a tree from the file given by the user
tree <- read.tree(fileName)
# Reset the margins
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the tree
plot.phylo(tree, type = "p", show.tip.label = T, label.offset = .05,
y.lim = c(0.5, 5.5), no.margin = F)
library("ape", lib.loc="E:/Programs/R-3.5.1/library")
# Plot the tree
plot.phylo(tree, type = "p", show.tip.label = T, label.offset = .05,
y.lim = c(0.5, 5.5), no.margin = F)
nodelabels(text = 1 : (Ntip(tree) + Nnode(tree)),
node = 1 : (Ntip(tree) + Nnode(tree)), frame = "circle")
edgelabels(frame = "none", col = "red", adj = c(0.5, -0.1))
axisPhylo(1)
View(tree)
# Create a tree from the file given by the user
tree <- read.tree(fileName)
# Reset the margins
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the tree so the edge, node numbers, and tip labels are shown
plot.phylo(tree, type = "p", show.tip.label = T, label.offset = .05,
y.lim = c(0.5, 5.5), no.margin = F)
nodelabels(text = 1 : (Ntip(tree) + Nnode(tree)),
node = 1 : (Ntip(tree) + Nnode(tree)), frame = "circle")
edgelabels(frame = "none", col = "red", adj = c(0.5, -0.1))
axisPhylo(1)
# Create a tree from the file given by the user
tree <- read.tree(fileName)
# Reset the margins
par(mar = c(5, 4, 4, 2) + 0.1)
# Reset the margins
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the tree so the edge, node numbers, and tip labels are shown
plot.phylo(tree, type = "p", show.tip.label = T, label.offset = .05,
y.lim = c(0.5, 5.5), no.margin = F)
nodelabels(text = 1 : (Ntip(tree) + Nnode(tree)),
node = 1 : (Ntip(tree) + Nnode(tree)), frame = "circle")
edgelabels(frame = "none", col = "red", adj = c(0.5, -0.1))
axisPhylo(1)
# calculate the attenuation matrix using the cophenetic distance function
A <- cophenetic(attenuationTree)
# Copy the phylogeny and multiply edge lengths with alpha
attenuationTree <- tree
# calculate the attenuation matrix using the cophenetic distance function
A <- cophenetic(attenuationTree)
?exp()
